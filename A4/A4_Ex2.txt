------------------------------------------
G2_team01
William Gyrulf (ID: 031112), Jakub Haczkiewicz (ID: 040508)

Disclosure: to perform this exercise, I have utilised external resources and assistance:
    - Lectures
    - CLRS 4th Edition
------------------------------------------

(1)

This exercise asked to implement a traversal algorithm that computes the shortest-path distances
from a given source vertex s to all other vertices.

The BFS function performs a Breadth-First Search (BFS) on a graph starting from a specified vertex.
It uses a queue to keep track of vertices to visit next.
For each visited vertex, it checks all its adjacent vertices and if they haven't been visited,
it updates their distance (from the start vertex),
marks them as visited, sets their predecessor as the current vertex, and adds them to the queue.
This process continues until all reachable vertices have been visited.
The function also ensures to free the memory allocated for the queue after the traversal.

The code used to test is implemented in the following file:
    - A4_Ex2.c
    - list.c
    - list.h
    - graph.c
    - graph.h
    - queue.c
    - queue.h

Code Execution:
To compile and execute the code:
    $ gcc -c A4_Ex2.c
    $ gcc -c list.c
    $ gcc -c queue.c
    $ gcc -c graph.c
    $ gcc -o A4_Ex2 A4_Ex2.o graph.o list.o queue.o
    $ ./A4_Ex2

(2)

This exercise asked to use the BFS function using different source vertices.

Birthdate: 031112

2.1
Source: 2

Distance from 2 to 1: 5
Distance from 2 to 2: 0
Distance from 2 to 3: 2
Distance from 2 to 4: 3
Distance from 2 to 5: 1
Distance from 2 to 6: 2
No path from 2 to 7
Distance from 2 to 8: 4
Distance from 2 to 9: 1

2.1
source: 1

Distance from 1 to 1: 0
No path from 1 to 2
Distance from 1 to 3: 2
Distance from 1 to 4: 1
Distance from 1 to 5: 1
No path from 1 to 6
No path from 1 to 7
Distance from 1 to 8: 1
No path from 1 to 9